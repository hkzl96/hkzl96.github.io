<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 搭建个人博客</title>
    <url>/archives/undefined.html</url>
    <content><![CDATA[<p>Hexo 搭建个人博客</p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介:"></a>1. 简介:</h2><p>Hexo 是 基于 node.js 制作的一个博客工具</p>
<h3 id="1-1-为什么要使用hexo"><a href="#1-1-为什么要使用hexo" class="headerlink" title="1.1 为什么要使用hexo"></a>1.1 为什么要使用hexo</h3><p>快速制作个人博客</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>前置条件安装了node.js</p>
<ul>
<li><p>使用npm 安装hexo </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -g hexo-cli</span></pre></td></tr></table></figure>
</li>
<li><p>检查是否安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo -v</span></pre></td></tr></table></figure>
</li>
<li><p>指定一个文件夹作为存储 , 在文件夹目录打开cmd即可</p>
<blockquote>
<p>这里可以在 D 盘下 创建一个 myhexo 文件夹</p>
</blockquote>
</li>
<li><p>执行初始化命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo init</span></pre></td></tr></table></figure>

<p>执行成功后文件夹下会生成</p>
<p><img src="C:%5CUsers%5C%E8%8A%B1%E5%BC%80%E8%87%AA%E6%9D%A5%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574925810424.png" alt="1574925810424"></p>
</li>
</ul>
<h2 id="3-本地启动博客"><a href="#3-本地启动博客" class="headerlink" title="3. 本地启动博客"></a>3. 本地启动博客</h2><p>执行cmd 命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo s</span></pre></td></tr></table></figure>

<p>执行命令后显示访问本地4000端口查看</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS D:\myHexo&gt; hexo s</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO  <span class="built_in">Start</span> processing</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO  Hexo is running <span class="built_in">at</span> http://localhost:<span class="number">4000</span> . Press Ctrl+C to stop.</span></pre></td></tr><tr><td class="code"><pre><span class="line">INFO  Catch you later</span></pre></td></tr></table></figure>



<h2 id="4-添加博文"><a href="#4-添加博文" class="headerlink" title="4.添加博文"></a>4.添加博文</h2><p>windows 系统可以之间将写好的md 文件放入\source_posts 即可,推荐使用Typora 编写 md</p>
<p><img src="C:%5CUsers%5C%E8%8A%B1%E5%BC%80%E8%87%AA%E6%9D%A5%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574927745723.png" alt="1574927745723"></p>
<h2 id="5-将博客上传到-github-上"><a href="#5-将博客上传到-github-上" class="headerlink" title="5. 将博客上传到 github 上"></a>5. 将博客上传到 github 上</h2><p>需要四步操作:  </p>
<ul>
<li><p>github 的 ssh key  需要配置</p>
</li>
<li><p>在github 上创建一个仓库要求和 github的账号名相同</p>
<blockquote>
<p>新建一个名为你的用户名.github.io 的仓库，比如说，如果你的 GitHub 用户名是 hkzl96，那么你就新建 hkzl96.github.io 的仓库，将来你的网站访问地址就是 <a href="https://hkzl96.github.io。" target="_blank" rel="external nofollow noopener noreferrer">https://hkzl96.github.io。</a></p>
</blockquote>
</li>
<li><p>配置<code>_config.yml</code> 中有关 deploy 的部分。</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:账号名/账号名.github.io.git</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span></pre></td></tr></table></figure>

<ul>
<li><p>运行命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo d -g #生成并上传</span></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="6-更换博客主题"><a href="#6-更换博客主题" class="headerlink" title="6. 更换博客主题"></a>6. 更换博客主题</h2><h3 id="6-1-1-这里举例使用yilia主题"><a href="#6-1-1-这里举例使用yilia主题" class="headerlink" title="6.1.1 这里举例使用yilia主题"></a>6.1.1 这里举例使用yilia主题</h3><p>需要两部操作</p>
<ul>
<li>github下载主题,放入hexo根目录下的themes 中</li>
</ul>
<p>可以百度hexo主题, 找到主题的github下载压缩包后解压,将解压后的文件放入 themes 文件下</p>
<blockquote>
<p> ailia主题github 地址</p>
<p><a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external nofollow noopener noreferrer">https://github.com/litten/hexo-theme-yilia.git</a></p>
</blockquote>
<ul>
<li><p>将 Hexo 根目录下的<code>_config.yml</code> 中的 <code>theme: landscape</code> 改为 <code>theme: 解压后的文件夹名</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">解压后的文件夹名</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-1-2-第二种下载主题的方式"><a href="#6-1-2-第二种下载主题的方式" class="headerlink" title="6.1.2 第二种下载主题的方式"></a>6.1.2 第二种下载主题的方式</h3><ul>
<li>命令行执行</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">`<span class="built_in">cd</span> /d/document/GitHub/hexo/git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia`</span></pre></td></tr></table></figure>

<ul>
<li><p>将 Hexo 根目录下的<code>_config.yml</code> 中的 <code>theme: landscape</code> 改为 <code>theme: yilia</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">theme: <span class="title">yilia</span></span></span></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6. 2 注意事项"></a>6. 2 注意事项</h3><p>如果出现一些莫名其妙的问题，可以先执行 <code>hexo clean</code> 来清理一下 public 的内容，然后再来重新生成和发布。</p>
<h2 id="7-博客简单的配置-config-yml"><a href="#7-博客简单的配置-config-yml" class="headerlink" title="7. 博客简单的配置_config.yml"></a>7. 博客简单的配置_config.yml</h2><p><strong>注意:</strong></p>
<blockquote>
<ul>
<li>配置文件一定要注意缩进</li>
<li>冒号后面必须有一个空格，否则可能会出问题。</li>
<li>出现博客中文显示乱码问题，原因：记事本打开的默认不是用 utf-8，所以汉字会出现乱码。因此，我用记事本打开<code>_config.yml</code> 文件，以 utf-8 编码保存，解决了这个问题。</li>
</ul>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">**My</span> <span class="string">Blog**</span> <span class="comment">#博客名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">subtitle:</span> <span class="string">to</span> <span class="string">be</span> <span class="string">continued...</span> <span class="comment">#副标题</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">My</span> <span class="string">blog</span> <span class="comment">#给搜索引擎看的，对网站的描述，可以自定义</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">author:</span> <span class="string">**Yourname**</span> <span class="comment">#作者，在博客底部可以看到</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">email:</span> <span class="string">yourname@yourmail.com</span> <span class="comment">#你的联系邮箱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">**zh-CN**</span> <span class="comment">#中文。如果不填则默认英文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Writing 文章布局、写作格式的定义，不修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Server 不修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Date / Time format 日期格式，可以修改成自己喜欢的格式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Pagination 每页显示文章数，可以自定义，贴主设置的是10</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus Disqus插件，我们会替换成“多说”，不修改</span></span></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Spring RestTemplate</title>
    <url>/archives/undefined.html</url>
    <content><![CDATA[<h1 id="服务器间请求-Spring-RestTemplate"><a href="#服务器间请求-Spring-RestTemplate" class="headerlink" title="服务器间请求 Spring RestTemplate"></a>服务器间请求 Spring RestTemplate</h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>Spring RestTemplate  是一套操作http的接口,整合了</p>
<ul>
<li>httpClient</li>
<li>OKhttp</li>
<li>JDK原生的URLConnection（默认使用）</li>
</ul>
<a id="more"></a>


<h2 id="1-1-为什么要用Spring-RestTemplate"><a href="#1-1-为什么要用Spring-RestTemplate" class="headerlink" title="1.1 为什么要用Spring RestTemplate"></a>1.1 为什么要用Spring RestTemplate</h2><p>统一了接口,简化了操作.</p>
<h1 id="2-SpringBoot-整合-SpringRestTemplate"><a href="#2-SpringBoot-整合-SpringRestTemplate" class="headerlink" title="2. SpringBoot 整合 SpringRestTemplate"></a>2. SpringBoot 整合 SpringRestTemplate</h1><h2 id="2-1-pom-引入"><a href="#2-1-pom-引入" class="headerlink" title="2.1 pom 引入"></a>2.1 pom 引入</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>           	         </span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<h2 id="2-2-创建配置类RestTempLate-java-类"><a href="#2-2-创建配置类RestTempLate-java-类" class="headerlink" title="2.2 创建配置类RestTempLate.java 类"></a>2.2 创建配置类RestTempLate.java 类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate(factory);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        factory.setConnectTimeout(<span class="number">15000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        factory.setReadTimeout(<span class="number">5000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="2-3-第二种注册方式-不需要配置类-在SpringBoot注册"><a href="#2-3-第二种注册方式-不需要配置类-在SpringBoot注册" class="headerlink" title="2.3 第二种注册方式, 不需要配置类,在SpringBoot注册"></a>2.3 第二种注册方式, 不需要配置类,在SpringBoot注册</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不用配置类的话,可以直接在SpringBoot启动类注册</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 默认的RestTemplate，底层是走JDK的URLConnection方式, 可能会出现中文乱码问题。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>



<h2 id="2-3在service-中注入"><a href="#2-3在service-中注入" class="headerlink" title="2.3在service 中注入"></a>2.3在service 中注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> RestTemplate restTemplate;</span></pre></td></tr></table></figure>



<h1 id="3-使用测试"><a href="#3-使用测试" class="headerlink" title="3. 使用测试"></a>3. 使用测试</h1><h2 id="3-1-get请求-获得天气预报"><a href="#3-1-get请求-获得天气预报" class="headerlink" title="3.1 get请求 获得天气预报"></a>3.1 get请求 获得天气预报</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWeather</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=北京"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(forEntity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>这里需要处理中文乱码和压缩的格式,获得的返回数据是经过 GZIP 压缩过的, 而默认的URLConnection无法支持所以考虑创建使用httpClient的RestTemplate</li>
</ul>
<h3 id="3-1-1-使用map结合get传入多个参数"><a href="#3-1-1-使用map结合get传入多个参数" class="headerlink" title="3.1.1 使用map结合get传入多个参数"></a>3.1.1 使用map结合get传入多个参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">hm.put(<span class="string">"pageNum"</span>, <span class="string">"1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">hm.put(<span class="string">"pageSize"</span>, <span class="string">"2"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(<span class="string">"http://localhost:8099/product?pageNum=&#123;pageNum&#125;&amp;pageSize=&#123;pageSize&#125;"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">hm</span>)</span>;</span></pre></td></tr></table></figure>

<p>提供一个简单的url拼接方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUrl</span><span class="params">(String url, Map&lt;String,String&gt; map)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    StringBuilder urlBuilder = <span class="keyword">new</span> StringBuilder(url).append(<span class="string">"?"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (String s : map.keySet()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        urlBuilder.append(String.format(<span class="string">"%s"</span> + <span class="string">"="</span> + <span class="string">"%s"</span> + <span class="string">"&amp;"</span>, s, map.get(s)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> url = urlBuilder.toString().substring(<span class="number">0</span>,url.length()-<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>post , put, delete 与 get 发送相同 , </p>
<h2 id="3-2-getForEntity-方法参数说明"><a href="#3-2-getForEntity-方法参数说明" class="headerlink" title="3.2  getForEntity 方法参数说明"></a>3.2  getForEntity 方法参数说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一个参数: 请求路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">第二个参数: 返回值类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">第三个参数: 路径参数</span></pre></td></tr></table></figure>

<h1 id="4-中文乱码解决"><a href="#4-中文乱码解决" class="headerlink" title="4.中文乱码解决"></a>4.中文乱码解决</h1><h2 id="4-1-这里选择RestTemplate切换使用为httpClient-解决中文乱码和压缩格式问题"><a href="#4-1-这里选择RestTemplate切换使用为httpClient-解决中文乱码和压缩格式问题" class="headerlink" title="4.1  这里选择RestTemplate切换使用为httpClient 解决中文乱码和压缩格式问题"></a>4.1  这里选择RestTemplate切换使用为httpClient 解决中文乱码和压缩格式问题</h2><p>pom 文件依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure>

<p>SpringBoot 启动类注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 使用HttpClient，支持GZIP</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(<span class="keyword">new</span> HttpComponentsClientHttpRequestFactory());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 支持中文编码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    restTemplate.getMessageConverters().set(<span class="number">1</span>, <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> restTemplate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Vue 初级学习</title>
    <url>/archives/undefined.html</url>
    <content><![CDATA[<h1 id="Vue-学习"><a href="#Vue-学习" class="headerlink" title="Vue 学习"></a>Vue 学习</h1><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>1 . vue 是 MVVM 模式的实现</p>
<p>2 . vue 官方文档详细易懂</p>
<a id="more"></a>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>百度网盘下载链接</li>
</ul>
<blockquote>
<p><a href="https://pan.baidu.com/s/14tQXWrF-yogoftTIx6Jocw&amp;shfl=sharepset" target="_blank" rel="external nofollow noopener noreferrer">https://pan.baidu.com/s/14tQXWrF-yogoftTIx6Jocw&amp;shfl=sharepset</a></p>
<p>提取码</p>
<p>paik</p>
</blockquote>
<ul>
<li>CDN </li>
</ul>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr></table></figure>
</blockquote>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- 插值表达式 &#123;&#123; &#125;&#125;   --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button @click&#x3D;&quot;fun1&quot;&gt; &#123;&#123; val &#125;&#125;&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- vue 实例--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var vm &#x3D; new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        el: &quot;#app&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            val: &#39;取到值啦&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fun1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                alert(&quot;hello world&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>vue 实例需要绑定在一个容器上, 该容器一定要有 id 属性, (容器不能是 html 或者 body 标签, 通常使用 div  )</p>
<ul>
<li><p>如果使用 html 或者 body 标签作为容器标签则前台报错</p>
<blockquote>
<p>vue.js:634 [Vue warn]: Do not mount Vue to <html> or <body> - mount to normal elements instead.</body></html></p>
</blockquote>
</li>
</ul>
<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125;</span></pre></td></tr></table></figure>

<ul>
<li><p>获取 vue 实例中的变量</p>
</li>
<li><p>支持运算符( 包括三元运算符)</p>
</li>
<li><p>支持数组索引取值</p>
</li>
<li><p>支持对象取值,及调用方法</p>
<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; variable ? v2 : v3 &#125;&#125; &lt;!--  右边 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; variable ? <span class="number">2</span>+<span class="number">2</span> : <span class="number">1</span>+<span class="number">2</span> &#125;&#125;   &lt;!--  <span class="number">3</span>   --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; arr &#125;&#125;   &lt;!--    [ <span class="string">"大明"</span>, <span class="string">"二明"</span>, <span class="string">"小明"</span> ]   --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; arr[<span class="number">2</span>] &#125;&#125;    &lt;!--  小明   --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; dog.name&#125;&#125;        &lt;!--  可乐   --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; dog.speak () &#125;&#125;   &lt;!--  错误的写法  &#123;&#123; dog.speak &#125;&#125; 需要加 () --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; <span class="built_in">JSON</span>.stringify(dog)&#125;&#125;  &lt;!--    &#123; <span class="string">"name"</span>: <span class="string">"可乐"</span> &#125; &#123;<span class="string">"name"</span>:<span class="string">"可乐"</span>&#125;  --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; $data._specialCase &#125;&#125;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        el: '#app',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        data: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            variable: '',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            v2: '左边',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            v3: '右边',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            arr: ['大明', '二明', '小明'],</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            dog: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                name: '可乐',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                speak() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    console.log("</span>旺旺<span class="string">");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            _specialCase:'以 _ 或 $ 开头的特例'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        methods: &#123;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/body&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/html&gt;</span></span></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a>注意:</h4><blockquote>
<p>以 _ 或 $  开头的data区变量 不能被vue 实例代理, </p>
<p>需要使用   this.$data.    来操作 </p>
</blockquote>
<h2 id="vue-指令-v-if-v-show"><a href="#vue-指令-v-if-v-show" class="headerlink" title="vue 指令 v-if  | v-show"></a>vue 指令 v-if  | v-show</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1  v-<span class="keyword">if</span>=<span class="string">"myswitch"</span>&gt; <span class="literal">true</span> &lt;<span class="regexp">/h1&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">    &lt;h1  v-else="!myswitch"&gt; false &lt;/</span>h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button @click=<span class="string">"fun1"</span>&gt;反转&lt;<span class="regexp">/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        el: <span class="string">'#app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               myswitch:<span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        methods:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fun1()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">this</span>.myswitch=!<span class="keyword">this</span>.myswitch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>v-if  和 v-show  都作用与条件判断 ,不同点为 v-if  是移除元素.v-show 是为标签加上display : none</li>
</ul>
<h3 id="循环-v-for"><a href="#循环-v-for" class="headerlink" title="循环 v-for"></a>循环 v-for</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;table border=<span class="string">"1px"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;tr&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;td&gt;索引&lt;<span class="regexp">/td&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">            &lt;td&gt;姓名&lt;/</span>td&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;td&gt;性别&lt;<span class="regexp">/td&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;!--  此处 el 代表每次循环的元素对象,index 为索引 , 命名都随意    --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;tr v-<span class="keyword">for</span>=<span class="string">" (el,index) in arr"</span> v-<span class="keyword">if</span>=<span class="string">"el.gender != '女' "</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;td&gt;&#123;&#123;index&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">            &lt;td&gt;&#123;&#123;el.name&#125;&#125;&lt;/</span>td&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;td&gt;&#123;&#123;el.gender&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">        &lt;/</span>tr&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;<span class="regexp">/table&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;/</span>div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        el: <span class="string">'#app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                arr: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;<span class="string">"name"</span>: <span class="string">"YYY"</span>, <span class="string">"gender"</span>: <span class="string">"男"</span>&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;<span class="string">"name"</span>: <span class="string">"ZZZ"</span>, <span class="string">"gender"</span>: <span class="string">"女"</span>&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#123;<span class="string">"name"</span>: <span class="string">"XXX"</span>, <span class="string">"gender"</span>: <span class="string">"男"</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>v-for 和 v-if 同时使用时, v-for 优先执行, 先遍历后,再进行条件判断</li>
</ul>
<h3 id="属性赋值-v-bind"><a href="#属性赋值-v-bind" class="headerlink" title="属性赋值 v-bind"></a>属性赋值 v-bind</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;img v-bind:src=<span class="string">"img1"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;img  :src=<span class="string">"img2"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        el: '#app',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        data() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            return &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">              img1:'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2309271173,2086110113&amp;fm=26&amp;gp=0.jpg',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">              img2:'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1666966895,993299225&amp;fm=26&amp;gp=0.jpg',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;/script&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li><p>v-bind: 可以将vue对象中的值赋值到html 的标签属性</p>
<p>(v-bind 可以简写为 冒号   ) </p>
</li>
</ul>
<h3 id="双向绑定-v-model"><a href="#双向绑定-v-model" class="headerlink" title="双向绑定 v-model"></a>双向绑定 v-model</h3><p>可以将 vue中data属性的内容赋值给表单元素, </p>
<ul>
<li>当表单改变时, 绑定的属性随之改变 </li>
<li>当绑定的属性改变时, 表单也随之改变</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;form action=<span class="string">""</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        账号:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"account"</span>&gt;</span> &#123;&#123;account&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        密码:&lt;input type="password" v-model="password"&gt; &#123;&#123;password&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        性别: 男&lt;input type="radio" v-model="gender" value="男"&gt; 女&lt;input type="radio" v-model="gender" value="女"&gt; &#123;&#123;gender&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        爱好: java &lt;input type="checkbox" v-model="hobby" value="java"&gt; 羽毛球 &lt;input type="checkbox" v-model="hobby"</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                                 value="羽毛球"&gt; &#123;&#123;hobby&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        省份: &lt;select v-model="province"&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;option value="江苏"&gt;江苏&lt;/option&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;option value="山东"&gt;山东&lt;/option&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;option value="河北"&gt;河北&lt;/option&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;&#123;province&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/form&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button @click="fun1"&gt;省变山东&lt;/button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;button @click="degeneration"&gt;变性&lt;/button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    var vm = new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        el: '#app',</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                account: '',</span></pre></td></tr><tr><td class="code"><pre><span class="line">                password: '',</span></pre></td></tr><tr><td class="code"><pre><span class="line">                gender: '',</span></pre></td></tr><tr><td class="code"><pre><span class="line">                hobby: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">                province: '',</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fun1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.province = '山东';</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            degeneration()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.gender  = this.gender == '男' ? '女': '男';</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/script&gt;</span></pre></td></tr></table></figure>

<h2 id="vue-对象模板"><a href="#vue-对象模板" class="headerlink" title="vue 对象模板"></a>vue 对象模板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// 创建vue实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// el : 将vue通过 id 挂载到页面的标签上</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        el: <span class="string">'#app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//data : 放置变量的区域</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            account: <span class="string">''</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            password: <span class="string">''</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// methods : 放方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        methods: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fun1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">this</span>.account = <span class="string">'123'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;         </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;</span></span></pre></td></tr></table></figure>



<h2 id="vue-的生命周期钩子函数"><a href="#vue-的生命周期钩子函数" class="headerlink" title="vue 的生命周期钩子函数"></a>vue 的生命周期钩子函数</h2><p>每个vue 实例在被创建时, 都会经过 : </p>
<ul>
<li><p>创建实例</p>
</li>
<li><p>装载模板</p>
</li>
<li><p>渲染模板</p>
</li>
<li><p>销毁   等等 </p>
<p>在vue 的生命周期中, 每个状态都设置了监听函数(钩子函数 ) ,   生命周期函数一共 8 个</p>
</li>
</ul>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p>一共八个函数钩子, 代表整个vue 对象的生命周期</p>
<p>beforeCreate  :  vue 对象创建前执行  , 此时vue对象不存在 undefined</p>
<p>created : vue对象创建完成后执行,此时vue 中 data 区中变量不存在   undefined</p>
<p>beforeMount : 双向绑定前执行,</p>
<p>mounted   :     双向绑定后执行;</p>
<p>​    (  前四个生命周期钩子,vue 对象未赋值给对象变量)</p>
<p>beforeUpdate :  data区更新前, data区改变, 页面不变</p>
<p>updated : data更新后, 页面改变</p>
<p>beforeDestroy  :  销毁前执行</p>
<p>destroyed : 销毁后</p>
<p>​     </p>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>功能:本质是一个方法, 可以用插值表达式来直接获得返回值, </p>
<p>存在意义 :  可以在页面直接使用插值表达式来调用方法, </p>
<p>对于属性的逻辑操作应该放在计算属性中</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123;birthday&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">&lt;script&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        el: '#app',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        data() &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            return &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                thisdate: new Date(),</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        computed: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            birthday()&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                return dateFormat("</span>YYYY-mm-dd HH:MM:SS<span class="string">", this.thisdate);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;);</span></span></pre></td></tr></table></figure>
</blockquote>
<p><img src="C:%5CUsers%5C%E8%8A%B1%E5%BC%80%E8%87%AA%E6%9D%A5%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571449206716.png" alt="1571449206716"></p>
<h2 id="Vue插件"><a href="#Vue插件" class="headerlink" title="Vue插件"></a>Vue插件</h2><h3 id="1-VueRouter-路由"><a href="#1-VueRouter-路由" class="headerlink" title="1.VueRouter 路由"></a>1.VueRouter 路由</h3><p>自动热部署</p>
<p>前台的重定向和转发</p>
<h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介:"></a>简介:</h3><p>vue-router 是一个插件包，所以我们还是需要用 npm/cnpm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面</p>
<blockquote>
<ol>
<li><code>npm install vue-router --save-dev --registry=https://registry.npm.taobao.org</code></li>
</ol>
</blockquote>
<p>使用:</p>
<p><img src="C:%5CUsers%5C%E8%8A%B1%E5%BC%80%E8%87%AA%E6%9D%A5%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571101976396.png" alt="1571101976396"></p>
<p>1: 组件放在components 文件夹下</p>
<p>2: 创建路由配置文件</p>
<p>在src 下创建index.js </p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入路由插件</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Router from &#39;vue-router&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入上面定义的组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入想要添加的组件,如用到两个则需要导入两个</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Content from &#39;@&#x2F;components&#x2F;Content&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.use(Router);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 配置路由</span></pre></td></tr><tr><td class="code"><pre><span class="line">export default new Router(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  routes: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 路由路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">      path: &#39;&#x2F;content&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 路由名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">      name: &#39;Content&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#x2F;&#x2F; 跳转到组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">      component: Content</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
</blockquote>
<p>3: main.js 配置路由</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></pre></td></tr><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import App from &#39;.&#x2F;App&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 导入上面创建的路由配置目录,自动导入index.js</span></pre></td></tr><tr><td class="code"><pre><span class="line">import router from &#39;.&#x2F;router&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Vue.config.productionTip &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">new Vue(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  el: &#39;#app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  router,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  components: &#123; App &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
</blockquote>
<p>4: 在app.vue ,中使用路由完成跳转</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content2&quot;&gt;内容2&lt;&#x2F;router-link&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 所有组件显示的地方--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &#39;App&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;style&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#app &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -webkit-font-smoothing: antialiased;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  -moz-osx-font-smoothing: grayscale;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  text-align: center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  color: #2c3e50;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  margin-top: 60px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;style&gt;</span></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><strong>router-link：</strong> 默认会被渲染成一个 <code>&lt;a&gt;</code> 标签，<code>to</code> 属性为指定链接</li>
<li><strong>router-view：</strong> 用于渲染路由匹配到的组件</li>
</ul>
<h2 id="路由参数传递"><a href="#路由参数传递" class="headerlink" title="路由参数传递"></a>路由参数传递</h2><p>1: 路径添加占位符</p>
<blockquote>
<p>{ name: ‘UserProfile’,  path: ‘/user/profile/:id’,  component: UserProfile},</p>
<p>取值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $route.params.id &#125;&#125;</span></pre></td></tr></table></figure>
</blockquote>
<p>2: props 接受参数</p>
<blockquote>
<p>需要在index配置文件中添加允许props :true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; name: &#39;UserList&#39;,     path: &#39;&#x2F;user&#x2F;list&#x2F;:id&#39;, component: UserList , props:true&#125;,</span></pre></td></tr></table></figure>

<p>router-link 路径</p>
<blockquote>
<p><router-link :to="{name: 'UserList', params: {id: 1}}">用户列表</router-link></p>
</blockquote>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&#x2F;1&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span></pre></td></tr></table></figure>

<p>取值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  props:[&#39;id&#39;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: &quot;UserList&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&#123;id&#125;&#125;</span></pre></td></tr></table></figure>
</blockquote>
<p>重定向</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  path:&quot;&#x2F;home&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  redirect:&quot;&#x2F;main&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</blockquote>
<h2 id="路由器的钩子函数"><a href="#路由器的钩子函数" class="headerlink" title="路由器的钩子函数"></a>路由器的钩子函数</h2><ul>
<li><p><code>beforeRouteEnter</code>：在进入路由前执行</p>
</li>
<li><p><code>beforeRouteLeave</code>：在离开路由前执行</p>
<p><strong>代码</strong></p>
</li>
</ul>
<blockquote>
<ol>
<li><code>export default {</code></li>
<li><code>props: [&#39;id&#39;],</code></li>
<li><code>name: &quot;UserProfile&quot;,</code></li>
<li><code>beforeRouteEnter: (to, from, next) =&gt; {</code></li>
<li><code>console.log(&quot;准备进入个人信息页&quot;);</code></li>
<li><code>next();</code></li>
<li><code>},</code></li>
<li><code>beforeRouteLeave: (to, from, next) =&gt; {</code></li>
<li><code>console.log(&quot;准备离开个人信息页&quot;);</code></li>
<li><code>next();</code></li>
<li><code>}</code></li>
<li><code>}</code></li>
</ol>
</blockquote>
<p><strong>参数说明:</strong></p>
<blockquote>
<ul>
<li><p><code>to</code>：路由将要跳转的路径信息</p>
</li>
<li><p><code>from</code>：路径跳转前的路径信息</p>
</li>
<li><p>next:</p>
<p>：路由的控制参数</p>
<ul>
<li><code>next()</code> 跳入下一个页面</li>
<li><code>next(&#39;/path&#39;)</code> 改变路由的跳转方向，使其跳到另一个路由</li>
<li><code>next(false)</code> 返回原来的页面</li>
<li><code>next((vm)=&gt;{})</code> <strong>仅在 beforeRouteEnter 中可用，vm 是组件实例</strong></li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>app.vue  作用为显示组件</p>
<p>src 下创建view 文件夹, 用于存放组件</p>
<p>src 下创建router文件夹, 创建index.js , 为路由配置文件</p>
<p>方法中直接转跳的方法</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push(&quot;路径&quot;)</span></pre></td></tr></table></figure>
</blockquote>
<h2 id="sessionStorage操作"><a href="#sessionStorage操作" class="headerlink" title="sessionStorage操作"></a>sessionStorage操作</h2><p>增</p>
<blockquote>
<ol>
<li><code>sessionStorage.setItem(&#39;isLogin&#39;, &#39;true&#39;);</code></li>
</ol>
</blockquote>
<h1 id="Element-UI-的使用"><a href="#Element-UI-的使用" class="headerlink" title="Element UI  的使用"></a>Element UI  的使用</h1><p><a href="http://www.qfdmy.com/%E8%AF%BE%E7%A8%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-2-0/lessons/vuerouter-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B/" target="_blank" rel="external nofollow noopener noreferrer">http://www.qfdmy.com/%E8%AF%BE%E7%A8%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-2-0/lessons/vuerouter-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B/</a></p>
<p>创建一个名为 <code>hello-vue-element</code> 的工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 webpack 打包工具初始化一个名为 hello-vue-element 的工程</span></pre></td></tr><tr><td class="code"><pre><span class="line">vue init webpack hello-vue-element</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入工程目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd hello-vue-element</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 安装 vue-router</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 安装 element-ui</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i element-ui -S --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 安装 SASS 加载器</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install sass-loader node-sass --save-dev --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr><tr><td class="code"><pre><span class="line"># 安装依赖</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure>

<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
