{"meta":{"title":"花开自来","subtitle":"","description":"","author":"hkzl","url":"https://hkzl96.github.io","root":"/"},"pages":[{"title":"","date":"2019-12-03T01:25:15.841Z","updated":"2019-12-03T01:12:50.971Z","comments":true,"path":"404/index.html","permalink":"https://hkzl96.github.io/404/index.html","excerpt":"","text":"404"},{"title":"文章分类","date":"2018-10-14T16:03:57.000Z","updated":"2019-12-03T01:12:21.644Z","comments":false,"path":"categories/index.html","permalink":"https://hkzl96.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-12-03T01:10:51.000Z","updated":"2019-12-03T01:10:51.144Z","comments":true,"path":"about/index.html","permalink":"https://hkzl96.github.io/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-29T03:35:42.000Z","updated":"2019-12-03T01:11:38.157Z","comments":false,"path":"tags/index.html","permalink":"https://hkzl96.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo 搭建个人博客","slug":"Hexo 搭建个人博客","date":"2019-12-02T07:34:01.022Z","updated":"2019-12-02T07:33:45.047Z","comments":true,"path":"archives/undefined.html","link":"","permalink":"https://hkzl96.github.io/archives/undefined.html","excerpt":"","text":"Hexo 搭建个人博客 1. 简介:Hexo 是 基于 node.js 制作的一个博客工具 1.1 为什么要使用hexo快速制作个人博客 2. 安装前置条件安装了node.js 使用npm 安装hexo 1npm i -g hexo-cli 检查是否安装成功 1hexo -v 指定一个文件夹作为存储 , 在文件夹目录打开cmd即可 这里可以在 D 盘下 创建一个 myhexo 文件夹 执行初始化命令 1hexo init 执行成功后文件夹下会生成 3. 本地启动博客执行cmd 命令 1hexo s 执行命令后显示访问本地4000端口查看 1PS D:\\myHexo&gt; hexo s2INFO Start processing3INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.4INFO Catch you later 4.添加博文windows 系统可以之间将写好的md 文件放入\\source_posts 即可,推荐使用Typora 编写 md 5. 将博客上传到 github 上需要四步操作: github 的 ssh key 需要配置 在github 上创建一个仓库要求和 github的账号名相同 新建一个名为你的用户名.github.io 的仓库，比如说，如果你的 GitHub 用户名是 hkzl96，那么你就新建 hkzl96.github.io 的仓库，将来你的网站访问地址就是 https://hkzl96.github.io。 配置_config.yml 中有关 deploy 的部分。 1deploy:2 type: git3 repository: git@github.com:账号名/账号名.github.io.git4 branch: master 运行命令 1hexo d -g #生成并上传 6. 更换博客主题6.1.1 这里举例使用yilia主题需要两部操作 github下载主题,放入hexo根目录下的themes 中 可以百度hexo主题, 找到主题的github下载压缩包后解压,将解压后的文件放入 themes 文件下 ailia主题github 地址 https://github.com/litten/hexo-theme-yilia.git 将 Hexo 根目录下的_config.yml 中的 theme: landscape 改为 theme: 解压后的文件夹名 1theme: 解压后的文件夹名 6.1.2 第二种下载主题的方式 命令行执行 1`cd /d/document/GitHub/hexo/git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia` 将 Hexo 根目录下的_config.yml 中的 theme: landscape 改为 theme: yilia 1theme: yilia 6. 2 注意事项如果出现一些莫名其妙的问题，可以先执行 hexo clean 来清理一下 public 的内容，然后再来重新生成和发布。 7. 博客简单的配置_config.yml注意: 配置文件一定要注意缩进 冒号后面必须有一个空格，否则可能会出问题。 出现博客中文显示乱码问题，原因：记事本打开的默认不是用 utf-8，所以汉字会出现乱码。因此，我用记事本打开_config.yml 文件，以 utf-8 编码保存，解决了这个问题。 1title: **My Blog** #博客名2subtitle: to be continued... #副标题3description: My blog #给搜索引擎看的，对网站的描述，可以自定义4author: **Yourname** #作者，在博客底部可以看到5email: yourname@yourmail.com #你的联系邮箱6language: **zh-CN** #中文。如果不填则默认英文7timezone: Asia/Shanghai8# URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项9## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'10url: http://yoursite.com11# Writing 文章布局、写作格式的定义，不修改12# Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文13# Server 不修改14# Date / Time format 日期格式，可以修改成自己喜欢的格式15# Pagination 每页显示文章数，可以自定义，贴主设置的是1016# Disqus Disqus插件，我们会替换成“多说”，不修改","categories":[],"tags":[]},{"title":"Spring RestTemplate","slug":"Spring RestTemplate","date":"2019-12-02T02:32:45.554Z","updated":"2019-12-02T07:53:16.397Z","comments":true,"path":"archives/undefined.html","link":"","permalink":"https://hkzl96.github.io/archives/undefined.html","excerpt":"服务器间请求 Spring RestTemplate1. 简介Spring RestTemplate 是一套操作http的接口,整合了 httpClient OKhttp JDK原生的URLConnection（默认使用）","text":"服务器间请求 Spring RestTemplate1. 简介Spring RestTemplate 是一套操作http的接口,整合了 httpClient OKhttp JDK原生的URLConnection（默认使用） 1.1 为什么要用Spring RestTemplate统一了接口,简化了操作. 2. SpringBoot 整合 SpringRestTemplate2.1 pom 引入1&lt;dependency&gt; 2 &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;3 &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;4&lt;/dependency&gt; 2.2 创建配置类RestTempLate.java 类1@Configuration2public class RestTemplateConfig &#123;3 4 @Bean5 public RestTemplate restTemplate(ClientHttpRequestFactory factory)&#123;6 return new RestTemplate(factory);7 &#125;8 9 @Bean10 public ClientHttpRequestFactory simpleClientHttpRequestFactory()&#123;11 SimpleClientHttpRequestFactory factory = new SimpleClientHttpRequestFactory();12 factory.setConnectTimeout(15000);13 factory.setReadTimeout(5000);14 return factory;15 &#125;16 17&#125; 2.3 第二种注册方式, 不需要配置类,在SpringBoot注册1//不用配置类的话,可以直接在SpringBoot启动类注册2 @Bean3 public RestTemplate restTemplate() &#123;4 // 默认的RestTemplate，底层是走JDK的URLConnection方式, 可能会出现中文乱码问题。5 return new RestTemplate();6 &#125; 2.3在service 中注入1@Autowired2 private RestTemplate restTemplate; 3. 使用测试3.1 get请求 获得天气预报1public void getWeather() &#123;2 ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(\"http://wthrcdn.etouch.cn/weather_mini?city=北京\", String.class);3 System.out.println(forEntity);4&#125; 这里需要处理中文乱码和压缩的格式,获得的返回数据是经过 GZIP 压缩过的, 而默认的URLConnection无法支持所以考虑创建使用httpClient的RestTemplate 3.1.1 使用map结合get传入多个参数1HashMap&lt;String, String&gt; hm = new HashMap&lt;&gt;();2hm.put(\"pageNum\", \"1\");3hm.put(\"pageSize\", \"2\");4ResponseEntity&lt;String&gt; forEntity = restTemplate.getForEntity(\"http://localhost:8099/product?pageNum=&#123;pageNum&#125;&amp;pageSize=&#123;pageSize&#125;\", String.class, hm); 提供一个简单的url拼接方法 1public static String getUrl(String url, Map&lt;String,String&gt; map) &#123;2 StringBuilder urlBuilder = new StringBuilder(url).append(\"?\");3 for (String s : map.keySet()) &#123;4 urlBuilder.append(String.format(\"%s\" + \"=\" + \"%s\" + \"&amp;\", s, map.get(s)));5 &#125;6 return url = urlBuilder.toString().substring(0,url.length()-1);7&#125; post , put, delete 与 get 发送相同 , 3.2 getForEntity 方法参数说明1第一个参数: 请求路径2第二个参数: 返回值类型3第三个参数: 路径参数 4.中文乱码解决4.1 这里选择RestTemplate切换使用为httpClient 解决中文乱码和压缩格式问题pom 文件依赖 1&lt;dependency&gt;2 &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;3 &lt;artifactId&gt;httpclient&lt;/artifactId&gt;4 &lt;version&gt;4.5.2&lt;/version&gt;5&lt;/dependency&gt; SpringBoot 启动类注入 1@Bean2public RestTemplate restTemplate() &#123;3 // 使用HttpClient，支持GZIP4 RestTemplate restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory());5 // 支持中文编码6 restTemplate.getMessageConverters().set(1, new StringHttpMessageConverter(StandardCharsets.UTF_8));7 return restTemplate;8&#125;","categories":[],"tags":[]},{"title":"Vue 初级学习","slug":"Vue 初级学习","date":"2019-11-28T07:44:57.064Z","updated":"2019-12-02T07:53:26.245Z","comments":true,"path":"archives/undefined.html","link":"","permalink":"https://hkzl96.github.io/archives/undefined.html","excerpt":"Vue 学习初识简介1 . vue 是 MVVM 模式的实现 2 . vue 官方文档详细易懂","text":"Vue 学习初识简介1 . vue 是 MVVM 模式的实现 2 . vue 官方文档详细易懂 安装 百度网盘下载链接 https://pan.baidu.com/s/14tQXWrF-yogoftTIx6Jocw&amp;shfl=sharepset 提取码 paik CDN 1&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt; 入门入门案例1&lt;div id&#x3D;&quot;app&quot;&gt;2 &lt;!-- 插值表达式 &#123;&#123; &#125;&#125; --&gt;3 &lt;button @click&#x3D;&quot;fun1&quot;&gt; &#123;&#123; val &#125;&#125;&lt;&#x2F;button&gt;45&lt;&#x2F;div&gt;67&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;89&lt;script&gt;10 &lt;!-- vue 实例--&gt;11 var vm &#x3D; new Vue(&#123;12 el: &quot;#app&quot;,13 data: &#123;14 val: &#39;取到值啦&#39;,15 &#125;,16 methods: &#123;17 fun1() &#123;18 alert(&quot;hello world&quot;);19 &#125;20 &#125;21 &#125;)22&lt;&#x2F;script&gt; 注意vue 实例需要绑定在一个容器上, 该容器一定要有 id 属性, (容器不能是 html 或者 body 标签, 通常使用 div ) 如果使用 html 或者 body 标签作为容器标签则前台报错 vue.js:634 [Vue warn]: Do not mount Vue to or - mount to normal elements instead. 插值表达式1&#123;&#123; &#125;&#125; 获取 vue 实例中的变量 支持运算符( 包括三元运算符) 支持数组索引取值 支持对象取值,及调用方法 使用案例 1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;title&gt;Title&lt;/title&gt;6&lt;/head&gt;7&lt;body&gt;89&lt;div id=\"app\"&gt;10 &#123;&#123; variable ? v2 : v3 &#125;&#125; &lt;!-- 右边 --&gt;11 &lt;br&gt;12 &#123;&#123; variable ? 2+2 : 1+2 &#125;&#125; &lt;!-- 3 --&gt;13 &lt;br&gt;14 &#123;&#123; arr &#125;&#125; &lt;!-- [ \"大明\", \"二明\", \"小明\" ] --&gt;15 &lt;br&gt;16 &#123;&#123; arr[2] &#125;&#125; &lt;!-- 小明 --&gt;17 &lt;br&gt;18 &#123;&#123; dog.name&#125;&#125; &lt;!-- 可乐 --&gt;19 &lt;br&gt;20 &#123;&#123; dog.speak () &#125;&#125; &lt;!-- 错误的写法 &#123;&#123; dog.speak &#125;&#125; 需要加 () --&gt;21 &lt;br&gt;22 &#123;&#123; JSON.stringify(dog)&#125;&#125; &lt;!-- &#123; \"name\": \"可乐\" &#125; &#123;\"name\":\"可乐\"&#125; --&gt;23 &lt;br&gt;24 &#123;&#123; $data._specialCase &#125;&#125; 25&lt;/div&gt;2627&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;28&lt;script&gt;29 var vm = new Vue(&#123;30 el: '#app',31 data: &#123;32 variable: '',33 v2: '左边',34 v3: '右边',35 arr: ['大明', '二明', '小明'],36 dog: &#123;37 name: '可乐',38 speak() &#123;39 console.log(\"旺旺\");40 &#125;,41 &#125;,42 _specialCase:'以 _ 或 $ 开头的特例'43 &#125;,44 methods: &#123;&#125;45 &#125;)46&lt;/script&gt;47&lt;/body&gt;48&lt;/html&gt; 注意: 以 _ 或 $ 开头的data区变量 不能被vue 实例代理, 需要使用 this.$data. 来操作 vue 指令 v-if | v-show条件判断 1&lt;div id=\"app\"&gt;2 &lt;h1 v-if=\"myswitch\"&gt; true &lt;/h1&gt;3 &lt;h1 v-else=\"!myswitch\"&gt; false &lt;/h1&gt;4 &lt;button @click=\"fun1\"&gt;反转&lt;/button&gt;5&lt;/div&gt;6&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;7&lt;script&gt;8 var vm = new Vue(&#123;9 el: '#app',10 data() &#123;11 return &#123;12 myswitch:true,13 &#125;14 &#125;,15 methods:&#123;16 fun1()&#123;17 this.myswitch=!this.myswitch;18 &#125;19 &#125;20 &#125;)21&lt;/script&gt; v-if 和 v-show 都作用与条件判断 ,不同点为 v-if 是移除元素.v-show 是为标签加上display : none 循环 v-for1&lt;div id=\"app\"&gt;2 &lt;table border=\"1px\"&gt;3 &lt;tr&gt;4 &lt;td&gt;索引&lt;/td&gt;5 &lt;td&gt;姓名&lt;/td&gt;6 &lt;td&gt;性别&lt;/td&gt;7 &lt;/tr&gt;8 &lt;!-- 此处 el 代表每次循环的元素对象,index 为索引 , 命名都随意 --&gt;9 &lt;tr v-for=\" (el,index) in arr\" v-if=\"el.gender != '女' \"&gt;10 &lt;td&gt;&#123;&#123;index&#125;&#125;&lt;/td&gt;11 &lt;td&gt;&#123;&#123;el.name&#125;&#125;&lt;/td&gt;12 &lt;td&gt;&#123;&#123;el.gender&#125;&#125;&lt;/td&gt;13 &lt;/tr&gt;14 &lt;/table&gt;1516&lt;/div&gt;17&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;18&lt;script&gt;19 var vm = new Vue(&#123;20 el: '#app',21 data() &#123;22 return &#123;23 arr: [24 &#123;\"name\": \"YYY\", \"gender\": \"男\"&#125;,25 &#123;\"name\": \"ZZZ\", \"gender\": \"女\"&#125;,26 &#123;\"name\": \"XXX\", \"gender\": \"男\"&#125;27 ],28 &#125;29 &#125;30 &#125;)31&lt;/script&gt; v-for 和 v-if 同时使用时, v-for 优先执行, 先遍历后,再进行条件判断 属性赋值 v-bind1&lt;div id=\"app\"&gt;2 &lt;img v-bind:src=\"img1\" &gt;3 &lt;img :src=\"img2\" &gt;4&lt;/div&gt;5&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;6&lt;script&gt;7 var vm = new Vue(&#123;8 el: '#app',9 data() &#123;10 return &#123;11 img1:'https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2309271173,2086110113&amp;fm=26&amp;gp=0.jpg',12 img2:'https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1666966895,993299225&amp;fm=26&amp;gp=0.jpg',13 &#125;14 &#125;15 &#125;)16&lt;/script&gt; v-bind: 可以将vue对象中的值赋值到html 的标签属性 (v-bind 可以简写为 冒号 ) 双向绑定 v-model可以将 vue中data属性的内容赋值给表单元素, 当表单改变时, 绑定的属性随之改变 当绑定的属性改变时, 表单也随之改变 1&lt;div id=\"app\"&gt;2 &lt;form action=\"\"&gt;3 账号:&lt;input type=\"text\" v-model=\"account\"&gt; &#123;&#123;account&#125;&#125;4 &lt;br&gt;5 密码:&lt;input type=\"password\" v-model=\"password\"&gt; &#123;&#123;password&#125;&#125;6 &lt;br&gt;7 性别: 男&lt;input type=\"radio\" v-model=\"gender\" value=\"男\"&gt; 女&lt;input type=\"radio\" v-model=\"gender\" value=\"女\"&gt; &#123;&#123;gender&#125;&#125;8 &lt;br&gt;9 爱好: java &lt;input type=\"checkbox\" v-model=\"hobby\" value=\"java\"&gt; 羽毛球 &lt;input type=\"checkbox\" v-model=\"hobby\"10 value=\"羽毛球\"&gt; &#123;&#123;hobby&#125;&#125;11 &lt;br&gt;12 省份: &lt;select v-model=\"province\"&gt;13 &lt;option value=\"江苏\"&gt;江苏&lt;/option&gt;14 &lt;option value=\"山东\"&gt;山东&lt;/option&gt;15 &lt;option value=\"河北\"&gt;河北&lt;/option&gt;16 &lt;/select&gt;17 &#123;&#123;province&#125;&#125;18 &lt;/form&gt;19 &lt;br&gt;20 &lt;button @click=\"fun1\"&gt;省变山东&lt;/button&gt;21 &lt;button @click=\"degeneration\"&gt;变性&lt;/button&gt;2223&lt;/div&gt;24&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;25&lt;script&gt;26 var vm = new Vue(&#123;27 el: '#app',28 data() &#123;29 return &#123;30 account: '',31 password: '',32 gender: '',33 hobby: [],34 province: '',35 &#125;36 &#125;,37 methods: &#123;38 fun1() &#123;39 this.province = '山东';40 &#125;,41 degeneration()&#123;42 this.gender = this.gender == '男' ? '女': '男';43 &#125;44 &#125;45 &#125;)46&lt;/script&gt; vue 对象模板1&lt;script&gt;2 // 创建vue实例3 var vm = new Vue(&#123;4 // el : 将vue通过 id 挂载到页面的标签上5 el: '#app',6 //data : 放置变量的区域7 data: &#123;8 account: '',9 password: '',10 &#125;,11 // methods : 放方法12 methods: &#123;13 fun1() &#123;14 this.account = '123';15 &#125; 16 &#125;17 &#125;)18&lt;/script&gt; vue 的生命周期钩子函数每个vue 实例在被创建时, 都会经过 : 创建实例 装载模板 渲染模板 销毁 等等 在vue 的生命周期中, 每个状态都设置了监听函数(钩子函数 ) , 生命周期函数一共 8 个 生命周期钩子一共八个函数钩子, 代表整个vue 对象的生命周期 beforeCreate : vue 对象创建前执行 , 此时vue对象不存在 undefined created : vue对象创建完成后执行,此时vue 中 data 区中变量不存在 undefined beforeMount : 双向绑定前执行, mounted : 双向绑定后执行; ​ ( 前四个生命周期钩子,vue 对象未赋值给对象变量) beforeUpdate : data区更新前, data区改变, 页面不变 updated : data更新后, 页面改变 beforeDestroy : 销毁前执行 destroyed : 销毁后 ​ 计算属性功能:本质是一个方法, 可以用插值表达式来直接获得返回值, 存在意义 : 可以在页面直接使用插值表达式来调用方法, 对于属性的逻辑操作应该放在计算属性中 1&lt;div id=\"app\"&gt;2 &#123;&#123;birthday&#125;&#125;3&lt;/div&gt;4&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;5&lt;script&gt;6 var vm = new Vue(&#123;7 el: '#app',8 data() &#123;9 return &#123;10 thisdate: new Date(),11 &#125;12 &#125;,13 computed: &#123;14 birthday()&#123;15 return dateFormat(\"YYYY-mm-dd HH:MM:SS\", this.thisdate);16 &#125;17 &#125;18 &#125;); Vue插件1.VueRouter 路由自动热部署 前台的重定向和转发 简介:vue-router 是一个插件包，所以我们还是需要用 npm/cnpm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面 npm install vue-router --save-dev --registry=https://registry.npm.taobao.org 使用: 1: 组件放在components 文件夹下 2: 创建路由配置文件 在src 下创建index.js 1import Vue from &#39;vue&#39;2&#x2F;&#x2F; 导入路由插件3import Router from &#39;vue-router&#39;4&#x2F;&#x2F; 导入上面定义的组件5&#x2F;&#x2F; 导入想要添加的组件,如用到两个则需要导入两个6import Content from &#39;@&#x2F;components&#x2F;Content&#39;78&#x2F;&#x2F; 安装路由9Vue.use(Router);10&#x2F;&#x2F; 配置路由11export default new Router(&#123;12 routes: [13 &#123;14 &#x2F;&#x2F; 路由路径15 path: &#39;&#x2F;content&#39;,16 &#x2F;&#x2F; 路由名称17 name: &#39;Content&#39;,18 &#x2F;&#x2F; 跳转到组件19 component: Content20 &#125;21 ]22&#125;); 3: main.js 配置路由 1&#x2F;&#x2F; The Vue build version to load with the &#96;import&#96; command2&#x2F;&#x2F; (runtime-only or standalone) has been set in webpack.base.conf with an alias.3import Vue from &#39;vue&#39;4import App from &#39;.&#x2F;App&#39;567&#x2F;&#x2F; 导入上面创建的路由配置目录,自动导入index.js8import router from &#39;.&#x2F;router&#39;910Vue.config.productionTip &#x3D; false;1112&#x2F;* eslint-disable no-new *&#x2F;13new Vue(&#123;14 el: &#39;#app&#39;,15 router,16 components: &#123; App &#125;,17 template: &#39;&lt;App&#x2F;&gt;&#39;18&#125;); 4: 在app.vue ,中使用路由完成跳转 1&lt;template&gt;2 &lt;div id&#x3D;&quot;app&quot;&gt;3 &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;首页&lt;&#x2F;router-link&gt;4 &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容&lt;&#x2F;router-link&gt;5 &lt;router-link to&#x3D;&quot;&#x2F;content2&quot;&gt;内容2&lt;&#x2F;router-link&gt;67&lt;!-- 所有组件显示的地方--&gt;8 &lt;router-view&gt;&lt;&#x2F;router-view&gt;91011 &lt;&#x2F;div&gt;12&lt;&#x2F;template&gt;1314&lt;script&gt;151617export default &#123;18 name: &#39;App&#39;,19&#125;20&lt;&#x2F;script&gt;2122&lt;style&gt;23#app &#123;24 font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;25 -webkit-font-smoothing: antialiased;26 -moz-osx-font-smoothing: grayscale;27 text-align: center;28 color: #2c3e50;29 margin-top: 60px;30&#125;31&lt;&#x2F;style&gt; router-link： 默认会被渲染成一个 &lt;a&gt; 标签，to 属性为指定链接 router-view： 用于渲染路由匹配到的组件 路由参数传递1: 路径添加占位符 { name: ‘UserProfile’, path: ‘/user/profile/:id’, component: UserProfile}, 取值 1&#123;&#123; $route.params.id &#125;&#125; 2: props 接受参数 需要在index配置文件中添加允许props :true 1&#123; name: &#39;UserList&#39;, path: &#39;&#x2F;user&#x2F;list&#x2F;:id&#39;, component: UserList , props:true&#125;, router-link 路径 用户列表 或 1&lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&#x2F;1&quot;&gt;用户列表&lt;&#x2F;router-link&gt; 取值 1export default &#123;2 props:[&#39;id&#39;],3 name: &quot;UserList&quot;4&#125;56&#123;&#123;id&#125;&#125; 重定向 1&#123;2 path:&quot;&#x2F;home&quot;,3 redirect:&quot;&#x2F;main&quot;4&#125; 路由器的钩子函数 beforeRouteEnter：在进入路由前执行 beforeRouteLeave：在离开路由前执行 代码 export default { props: [&#39;id&#39;], name: &quot;UserProfile&quot;, beforeRouteEnter: (to, from, next) =&gt; { console.log(&quot;准备进入个人信息页&quot;); next(); }, beforeRouteLeave: (to, from, next) =&gt; { console.log(&quot;准备离开个人信息页&quot;); next(); } } 参数说明: to：路由将要跳转的路径信息 from：路径跳转前的路径信息 next: ：路由的控制参数 next() 跳入下一个页面 next(&#39;/path&#39;) 改变路由的跳转方向，使其跳到另一个路由 next(false) 返回原来的页面 next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例 小结app.vue 作用为显示组件 src 下创建view 文件夹, 用于存放组件 src 下创建router文件夹, 创建index.js , 为路由配置文件 方法中直接转跳的方法 1this.$router.push(&quot;路径&quot;) sessionStorage操作增 sessionStorage.setItem(&#39;isLogin&#39;, &#39;true&#39;); Element UI 的使用http://www.qfdmy.com/%E8%AF%BE%E7%A8%8B/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-2-0/lessons/vuerouter-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B/ 创建一个名为 hello-vue-element 的工程 1# 使用 webpack 打包工具初始化一个名为 hello-vue-element 的工程2vue init webpack hello-vue-element 1# 进入工程目录2cd hello-vue-element3# 安装 vue-router4npm install vue-router --save-dev --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org5# 安装 element-ui6npm i element-ui -S --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org7# 安装 SASS 加载器8npm install sass-loader node-sass --save-dev --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org9# 安装依赖10npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 启动项目1npm run dev","categories":[],"tags":[]}]}